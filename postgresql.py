import psycopg2
from amadeus_api import cheapest_flight, travel_prediction, activity_prediction, on_time_prediction
from mongo import DATABASE_NAME, COLLECTION_NAME, client, database, collection, collection_ontime
import pprint
import pandas as pd

HOST="localhost"
DATABASE = "amadeus"
USERNAME = "postgres"
PASSWORD = "flight"


conn = psycopg2.connect(host=HOST, database=DATABASE, user=USERNAME, password=PASSWORD)
cur = conn.cursor()

cur.execute("DROP TABLE IF EXISTS Offer CASCADE;")
cur.execute("""CREATE TABLE IF NOT EXISTS Offer(
    number INTEGER generated by default as identity NOT NULL PRIMARY KEY,
    Offer_id VARCHAR(160),
    date VARCHAR(160),
    code VARCHAR(50),
    Oneway VARCHAR(160),
    Bookable_Seats INTEGER); 
    """)


cur.execute("DROP TABLE IF EXISTS Itineraries CASCADE;")
cur.execute("""CREATE TABLE IF NOT EXISTS Itineraries(
    Itin_id INTEGER generated by default as identity NOT NULL PRIMARY KEY,
    Duration VARCHAR(160),
    number INTEGER generated by default as identity,
    Offer_id VARCHAR(160),
    code VARCHAR(50),
    FOREIGN KEY (number)
    REFERENCES Offer (number) ON UPDATE CASCADE
    );
    """)


cur.execute("DROP TABLE IF EXISTS Departure CASCADE;")
cur.execute("""CREATE TABLE IF NOT EXISTS Departure(
    Dep_id INTEGER generated by default as identity NOT NULL PRIMARY KEY,
    seg_id_1 VARCHAR(20),
    code VARCHAR(50),
    total_Dur VARCHAR(20),
    dur_1 VARCHAR(20),
    IataCode_1 VARCHAR(20),
    carrierCode_1 VARCHAR(20),
    air_number_1 VARCHAR(20),
    At_1 VARCHAR(20),
    Transfer VARCHAR(20),
    seg_id_2 VARCHAR(20),
    dur_2 VARCHAR(20),
    IataCode_2 VARCHAR(20),
    carrierCode_2 VARCHAR(20),
    air_number_2 VARCHAR(20),
    At_2 VARCHAR(20),
    number INTEGER generated by default as identity,
    FOREIGN KEY (number)
    REFERENCES Offer (number) ON UPDATE CASCADE
    );
    """)


cur.execute("DROP TABLE IF EXISTS Arrival CASCADE;")
cur.execute("""CREATE TABLE IF NOT EXISTS Arrival(
    Arr_id INTEGER generated by default as identity NOT NULL PRIMARY KEY,
    seg_id_1 VARCHAR(20),
    code VARCHAR(50),
    total_Dur VARCHAR(20),
    dur_1 VARCHAR(20),
    IataCode_1 VARCHAR(20),
    carrierCode_1 VARCHAR(20),
    air_number_1 VARCHAR(20),
    At_1 VARCHAR(20),
    Transfer VARCHAR(20),
    seg_id_2 VARCHAR(20),
    dur_2 VARCHAR(20),
    IataCode_2 VARCHAR(20),
    carrierCode_2 VARCHAR(20),
    air_number_2 VARCHAR(20),
    At_2 VARCHAR(20),
    number INTEGER generated by default as identity,
    FOREIGN KEY (number)
    REFERENCES Offer (number) ON UPDATE CASCADE
    );
    """)

cur.execute("DROP TABLE IF EXISTS Price CASCADE;")
cur.execute("""CREATE TABLE IF NOT EXISTS Price(
    Price_id INTEGER generated by default as identity NOT NULL PRIMARY KEY,
    code VARCHAR(50),
    Currency VARCHAR(20),
    Total VARCHAR(20),
    number INTEGER generated by default as identity,
    Offer_id VARCHAR(160),
    FOREIGN KEY (number)
    REFERENCES Offer (number) ON UPDATE CASCADE
    );
    """)

cur.execute("DROP TABLE IF EXISTS Prediction CASCADE;")
cur.execute("""CREATE TABLE IF NOT EXISTS Prediction (
    id INTEGER generated by default as identity NOT NULL PRIMARY KEY,
    dest VARCHAR(20),
    date VARCHAR(20),
    ontime_proba VARCHAR(20),
    number INTEGER generated by default as identity,
    FOREIGN KEY (number)
    REFERENCES Offer (number) ON UPDATE CASCADE
    );    
    """)

conn.commit()

def get_offer():

    for data in collection.find():
        
        itin = data["itineraries"][0]["segments"][0]
        offer_id = data["id"]
        oneway = data["oneWay"]
        date = itin["arrival"]["at"][:10]
        code = itin["aircraft"]["code"]
        book = data["numberOfBookableSeats"]

        query_offer = """INSERT INTO offer (
            offer_id, date, code, oneway, bookable_seats) VALUES (%s, %s, %s, %s, %s)"""
        cols_offer = (offer_id, date, code, oneway, book)

        cur.execute(query_offer, cols_offer)
        conn.commit()


def get_itin():

    for data in collection.find():

        itin = data["itineraries"][0]

        duration = itin["duration"]
        offer_id = data["id"]
        code = itin["segments"][0]["aircraft"]["code"]

        query_itin = """INSERT INTO itineraries (
            duration, offer_id, code) VALUES (%s, %s, %s)"""
        cols_itin = (duration, offer_id, code)

        cur.execute(query_itin, cols_itin)
        conn.commit()


def get_departure():

    for data in collection.find():
        itin = data["itineraries"][0]
        seg_1 = data["itineraries"][0]["segments"][0]

        seg_id_1 = seg_1["id"]
        code = seg_1["aircraft"]["code"]
        total_dur = itin["duration"]
        dur_1 = seg_1["duration"]
        iatacode_1 = seg_1["departure"]["iataCode"]
        carriercode_1 = seg_1["carrierCode"]
        air_number_1 = seg_1["number"]
        at_1 = seg_1["departure"]["at"][:10]

        transfer_y = ("Y")
        transfer_n = ("N")

        if len(itin["segments"]) == 2:

            seg_2 = data["itineraries"][0]["segments"][1]
            seg_id_2 = seg_2["id"]
            dur_2 = seg_2["duration"]
            iatacode_2 = seg_2["departure"]["iataCode"]
            carriercode_2 = seg_2["carrierCode"]
            air_number_2 = seg_2["number"]
            at_2 = seg_2["departure"]["at"][:10]

            query_dep = """INSERT INTO departure (
                seg_id_1, code, total_dur, dur_1, iatacode_1, carriercode_1, air_number_1, at_1,
                transfer, seg_id_2, dur_2, iatacode_2, carriercode_2, air_number_2, at_2) 
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""

            cols_dep = (seg_id_1, code, total_dur, dur_1, iatacode_1, carriercode_1, 
                        air_number_1, at_1, transfer_y, seg_id_2, dur_2, iatacode_2, carriercode_2, 
                        air_number_2, at_2)
        
            cur.execute(query_dep, cols_dep)
            conn.commit()
        
        else:
            query_dep = """INSERT INTO departure (
                seg_id_1, code, total_dur, dur_1, iatacode_1, carriercode_1, air_number_1, at_1, transfer) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"""
            cols_dep = (seg_id_1, code, total_dur, dur_1, iatacode_1, 
                        carriercode_1, air_number_1, at_1, transfer_n)

            cur.execute(query_dep, cols_dep)
            conn.commit()


def get_arrival():

    for data in collection.find():
        itin = data["itineraries"][0]
        seg_1 = data["itineraries"][0]["segments"][0]

        seg_id_1 = seg_1["id"]
        code = seg_1["aircraft"]["code"]
        total_dur = itin["duration"]
        dur_1 = seg_1["duration"]
        iatacode_1 = seg_1["arrival"]["iataCode"]
        carriercode_1 = seg_1["carrierCode"]
        air_number_1 = seg_1["number"]
        at_1 = seg_1["arrival"]["at"][:10]

        transfer_y = ("Y")
        transfer_n = ("N")

        if len(itin["segments"]) == 2:

            seg_2 = data["itineraries"][0]["segments"][1]
            seg_id_2 = seg_2["id"]
            dur_2 = seg_2["duration"]
            iatacode_2 = seg_2["arrival"]["iataCode"]
            carriercode_2 = seg_2["carrierCode"]
            air_number_2 = seg_2["number"]
            at_2 = seg_2["arrival"]["at"][:10]

            query_dep = """INSERT INTO arrival (
                seg_id_1, code, total_dur, dur_1, iatacode_1, carriercode_1, air_number_1, at_1,
                transfer, seg_id_2, dur_2, iatacode_2, carriercode_2, air_number_2, at_2) 
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""

            cols_dep = (seg_id_1, code, total_dur, dur_1, iatacode_1, carriercode_1, 
                        air_number_1, at_1, transfer_y, seg_id_2, dur_2, iatacode_2, carriercode_2, 
                        air_number_2, at_2)
        
            cur.execute(query_dep, cols_dep)
            conn.commit()
        
        else:
            query_dep = """INSERT INTO arrival (
                seg_id_1, code, total_dur, dur_1, iatacode_1, carriercode_1, air_number_1, at_1, transfer) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"""
            cols_dep = (seg_id_1, code, total_dur, dur_1, iatacode_1, 
                        carriercode_1, air_number_1, at_1, transfer_n)

            cur.execute(query_dep, cols_dep)
            conn.commit()


def get_price():

    for data in collection.find():
        seg_1 = data["itineraries"][0]["segments"][0]
        code = seg_1["aircraft"]["code"]
        currency = data["price"]["currency"]
        total = data["price"]["total"]
        offer_id = data["id"]

        query_price = """INSERT INTO price (
            code, currency, total, offer_id) VALUES (%s, %s, %s, %s)
            """
        cols_price = (code, currency, total, offer_id)

        cur.execute(query_price, cols_price)
        conn.commit()


def get_ontime():

    for data in collection_ontime.find():

        start_date = pd.to_datetime("2022-07-01")
        end_date = pd.to_datetime("2022-07-31")
        date_range = pd.date_range(start_date, end_date, freq="D")

        july=[]
        for day in date_range:
            days = str(day)[:10]
            july.append(days)


        dest = data["Destination"]
        probas = data["Probability"]
        len_proba = len(probas)

        for i in list(range(len_proba)):
            date = july[i]
            ontime_proba = probas[i]

            query_ontime = "INSERT INTO prediction (dest, date, ontime_proba) VALUES (%s, %s, %s)"

            cols_ontime = (dest, date, ontime_proba)

            cur.execute(query_ontime, cols_ontime)
            conn.commit()

# get_offer()
# get_itin()
# get_departure()
# get_arrival()
# get_price()
# get_ontime()


# pprint.pprint(collection_ontime.find_one()['Destination'])

# pprint.pprint(collection.find_one())

# len(collection.find_one()["itineraries"][0]["segments"][0])

# pprint.pprint(collection.find_one()["itineraries"][0]["segments"][1])

# len(collection.find_one()["itineraries"][0]["segments"][1])
    

